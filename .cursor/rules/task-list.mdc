---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for creating and managing task lists in markdown files to track project progress

## Task List Creation

1. Create task lists in a markdown file (in the project root):
   - Use `TASKS.md` or a descriptive name relevant to the feature (e.g., `ASSISTANT_CHAT.md`)
   - Include a clear title and description of the feature being implemented

2. Structure the file with these sections:
   ```markdown
   # Feature Name Implementation
   
   Brief description of the feature and its purpose.
   
   ## Completed Tasks
   
   - [x] Task 1 that has been completed
   - [x] Task 2 that has been completed
   
   ## In Progress Tasks
   
   - [ ] Task 3 currently being worked on
   - [ ] Task 4 to be completed soon
   
   ## Future Tasks
   
   - [ ] Task 5 planned for future implementation
   - [ ] Task 6 planned for future implementation
   
   ## Implementation Plan
   
   Detailed description of how the feature will be implemented.
   
   ### Relevant Files
   
   - path/to/file1.ts - Description of purpose
   - path/to/file2.ts - Description of purpose
   
   ## Type Checking and Linting
   
   Static analysis tools ensure code quality before tests run:
   
   ### Type Checking
   TypeScript provides static type checking to catch type errors before runtime:
   
   ```bash
   npm run check-types
   ```
   
   ### Linting
   ESLint enforces code style and best practices:
   
   ```bash
   npm run lint       # Check for issues
   npm run lint:fix   # Fix automatically fixable issues
   ```
   ```

## Task List Maintenance

1. Update the task list as you progress:
   - Mark tasks as completed by changing `[ ]` to `[x]`
   - Add new tasks as they are identified
   - Move tasks between sections as appropriate

2. Keep "Relevant Files" section updated with:
   - File paths that have been created or modified
   - Brief descriptions of each file's purpose
   - Status indicators (e.g., âœ…) for completed components

3. Add implementation details:
   - Architecture decisions
   - Data flow descriptions
   - Technical components needed
   - Environment configuration

4. Always include the "Type Checking and Linting" section at the end of each task list file.

## AI Instructions

When working with task lists, the AI should:

1. Regularly update the task list file after implementing significant components
2. Mark completed tasks with [x] when finished
3. Add new tasks discovered during implementation
4. Maintain the "Relevant Files" section with accurate file paths and descriptions
5. Document implementation details, especially for complex features
6. When implementing tasks one by one, first check which task to implement next
7. After implementing a task, update the file to reflect progress
8. Always ensure the "Type Checking and Linting" section is included and executed as the final step

## Example Task Update

When updating a task from "In Progress" to "Completed":

```markdown
## In Progress Tasks

- [ ] Create API endpoints for data access

## Completed Tasks

- [x] Set up project structure
- [x] Configure environment variables
- [x] Implement database schema
```

## Final Type Checking and Linting Step

Always complete implementation by running type checking and linting:

```markdown
## Type Checking and Linting

Static analysis tools ensure code quality before tests run:

### Type Checking
TypeScript provides static type checking to catch type errors before runtime:

```bash
npm run check-types
```

### Linting
ESLint enforces code style and best practices:

```bash
npm run lint       # Check for issues
npm run lint:fix   # Fix automatically fixable issues
```