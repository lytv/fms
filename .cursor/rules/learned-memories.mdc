---
description:
globs:
alwaysApply: false
---
# Project Memory

This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.

## User Preferences

- Người dùng thích nhận phản hồi ngắn gọn, cô đọng và thực tế
- Người dùng giao tiếp bằng tiếng Việt và thoải mái với việc sử dụng thuật ngữ kỹ thuật bằng tiếng Anh

## Project Conventions

- **Cấu trúc API:** Cả dự án sử dụng Next.js App Router với cấu trúc chuẩn `src/app/[locale]/(auth)/api/[resource]/route.ts`
- **Authentication:** Sử dụng Clerk cho việc xác thực người dùng
- **Validation:** Sử dụng Zod để xác thực dữ liệu đầu vào API
- **Database Access:** Sử dụng database pooling và transactions để đảm bảo tính nhất quán của dữ liệu
- **UI Components:** Sử dụng DataGrid component dựa trên AG Grid cho các bảng dữ liệu

## Technical Decisions

- **AG Grid Version:** Dự án sử dụng AG Grid v33.2.4 với những thay đổi API đáng kể so với phiên bản trước đó:
  - Không còn sử dụng `@ag-grid-community/client-side-row-model` package (đã deprecated trong v33)
  - `columnApi` đã được hợp nhất vào `gridApi` - sử dụng `gridApi` cho tất cả các thao tác
  - Một số phương thức API đã đổi tên (ví dụ: `setColumnVisible` → `setColumnsVisible`)
  - Yêu cầu đăng ký module với `ModuleRegistry.registerModules([ClientSideRowModelModule])`
  - Nên thiết lập `theme: 'legacy'` trong gridOptions để duy trì tương thích với CSS cũ

- **Database Connection**: The project uses a hybrid database approach:
  - In development: Connects to PostgreSQL via Client from 'pg'
  - In other environments: Uses PGlite for in-memory/local storage
  - Global scope is used to prevent multiple DB instances due to Next.js hot reloading

- **Authentication Flow**: Uses Clerk for authentication with a custom `verifyAuth` helper:
  - Checks for user authentication (401 if not authenticated)
  - Checks for organization selection (403 if not selected)
  - Optionally checks for required roles
  - Returns `{ authorized: true, userId, orgId }` when authorized

## Testing Conventions

- **Test Structure**: Tests follow a specific pattern:
  1. Mock Clerk auth with `vi.mock('@clerk/nextjs/server')`
  2. Mock database operations with `vi.mock('@/libs/DB')`
  3. Mock auth helpers with `vi.mock('@/utils/auth-helpers')`
  4. Use `describe` blocks to organize tests by HTTP method
  5. Test authentication, organization selection, and business logic cases separately

- **Mock Format**: Auth helper mocks should return properly structured response objects:
  ```typescript
  {
    authorized: false,
    response: new Response(JSON.stringify({ error: 'Error message' }), { 
      status: statusCode, 
      headers: { 'Content-Type': 'application/json' } 
    })
  }
  ```

## Common Issues

- **Date Handling**: When testing, Date objects should be converted to ISO strings (`new Date().toISOString()`) to match JSON serialization behavior.

- **Type Safety**: The project expects strict type checking. Variables should always have explicit types, especially when working with database connections.

## UI Components

- **RolesManagement**: Component quản lý vai trò cho thành viên trong tổ chức, cho phép thay đổi vai trò của từng thành viên. Đường dẫn: `/dashboard/organization-profile/roles-management`.
